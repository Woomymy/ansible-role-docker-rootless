---
- name: Verify
  hosts: all
  any_errors_fatal: true

  tasks:
    - name: register docker_user info
      become: 'yes'
      user:
        name: "{{ docker_user }}"
      check_mode: 'yes'
      register: docker_user_info

    - name: docker_user verification block
      block:
        - name: verify docker_user creation
          command: id "{{ docker_user }}"
          register: id_docker_user
          changed_when: id_docker_user.rc != 0
          failed_when: id_docker_user.rc != 0

        - name: verify docker_user subuid
          command: grep "^{{ docker_user }}:" /etc/subuid
          register: subuid_docker_user
          changed_when: subuid_docker_user.rc != 0
          failed_when: subuid_docker_user.rc != 0

        - name: verify docker_user subgid
          command: grep "^{{ docker_user }}:" /etc/subgid
          register: subgid_docker_user
          changed_when: subgid_docker_user.rc != 0
          failed_when: subgid_docker_user.rc != 0

        - name: verify docker_user dockerd
          shell: >
            set -o pipefail &&
            ps -fe | grep -E 'dockerd$|dockerd -s fuse-overlayfs$' | awk '{print $1}'
          args:
            executable: /bin/bash
          register: ps_dockerd
          changed_when: docker_user[:7] not in ps_dockerd.stdout
          failed_when: docker_user[:7] not in ps_dockerd.stdout

    - name: container verification block
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ docker_user_info.uid }}"
        PATH: "{{ docker_user_info.home }}/bin:{{ ansible_env.PATH }}"
        DOCKER_HOST: "unix:///run/user/{{ docker_user_info.uid }}/docker.sock"
      block:
        - name: reboot host
          become: 'yes'
          reboot:

        - name: wait for the host and reconnect
          wait_for:
            port: 22
            host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
            delay: 10
            timeout: 120

        - name: start rootful nginx container
          become: 'yes'
          docker_container:
            name: nginxroot
            image: konstruktoid/nginx
            state: started
            ports:
              - "8080:80"
            cap_drop: all
            capabilities:
              - chown
              - dac_override
              - net_bind_service
              - setgid
              - setuid
            pull: 'yes'
            hostname: "{{ ansible_nodename }}"
            container_default_behavior: compatibility
          when: docker_rootful|bool and docker_rootful_enabled|bool

        - name: verify running rootful container
          become: 'yes'
          docker_container_info:
            name: nginxroot
          register: nginxroot_container_running
          changed_when: not nginxroot_container_running
          failed_when: not nginxroot_container_running
          when: docker_rootful|bool and docker_rootful_enabled|bool

        - name: assert rootful container settings
          assert:
            that:
              - docker_user_info.uid|string in nginxroot_container_running.container.NetworkSettings.SandboxKey
              - docker_user_info.home in nginxroot_container_running.container.HostnamePath
          when: docker_rootful|bool and docker_rootful_enabled|bool

        - name: start rootless nginx container
          become: 'yes'
          become_user: "{{ docker_user }}"
          docker_container:
            name: nginx
            image: konstruktoid/nginx
            state: started
            cap_drop: all
            capabilities:
              - chown
              - dac_override
              - net_bind_service
              - setgid
              - setuid
            pull: 'yes'
            hostname: "{{ ansible_nodename }}"
            container_default_behavior: compatibility

        - name: verify running rootless container
          become: 'yes'
          become_user: "{{ docker_user }}"
          docker_container_info:
            name: nginx
          register: nginx_container_running
          changed_when: not nginx_container_running
          failed_when: not nginx_container_running

        - name: assert rootless container settings
          assert:
            that:
              - docker_user_info.uid|string in nginx_container_running.container.NetworkSettings.SandboxKey
              - docker_user_info.home in nginx_container_running.container.HostnamePath

        - name: restart rootless nginx container
          become: 'yes'
          become_user: "{{ docker_user }}"
          docker_container:
            name: nginx
            image: konstruktoid/nginx
            state: started
            restart: 'yes'
            ports:
              - "8081:80"
            cap_drop: all
            capabilities:
              - chown
              - dac_override
              - net_bind_service
              - setgid
              - setuid
            pull: 'yes'
            hostname: "{{ ansible_nodename }}"
            container_default_behavior: compatibility

        - name: verify restarted rootless container
          become: 'yes'
          become_user: "{{ docker_user }}"
          docker_container_info:
            name: nginx
          register: nginx_container_restarted
          changed_when: not nginx_container_restarted
          failed_when: not nginx_container_restarted

        - name: assert rootless container settings
          assert:
            that:
              - docker_user_info.uid|string in nginx_container_restarted.container.NetworkSettings.SandboxKey
              - docker_user_info.home in nginx_container_restarted.container.HostnamePath

        - name: verify rootless port 80 nginx container
          become: 'yes'
          become_user: "{{ docker_user }}"
          docker_container:
            name: nginxport
            image: konstruktoid/nginx
            state: started
            restart: 'yes'
            ports:
              - "80:80"
            cap_drop: all
            capabilities:
              - chown
              - dac_override
              - net_bind_service
              - setgid
              - setuid
            pull: 'yes'
            hostname: "{{ ansible_nodename }}"
            container_default_behavior: compatibility
          when: docker_allow_privileged_ports|bool

        - name: verify rootless port 80 container
          become: 'yes'
          become_user: "{{ docker_user }}"
          docker_container_info:
            name: nginxport
          register: nginxport_container_restarted
          changed_when: not nginxport_container_restarted
          failed_when: not nginxport_container_restarted
          when: docker_allow_privileged_ports|bool

        - name: verify rootful website
          uri:
            url: http://127.0.0.1:8080
            return_content: 'yes'
          register: published
          failed_when: "'nginx' not in published.content"
          when: docker_rootful|bool and docker_rootful_enabled|bool

        - name: verify rootless website
          uri:
            url: http://127.0.0.1:8081
            return_content: 'yes'
          register: published
          failed_when: "'nginx' not in published.content"

        - name: verify port 80 website
          uri:
            url: http://127.0.0.1:80
            return_content: 'yes'
          register: published
          failed_when: "'nginx' not in published.content"
          when: docker_allow_privileged_ports|bool
      when: not (ansible_distribution == "Debian" and ansible_distribution_major_version >= '11')
...
