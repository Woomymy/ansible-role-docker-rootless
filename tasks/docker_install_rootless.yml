---
- name: create "{{ docker_user }}" docker bin dir
  become: 'yes'
  become_user: "{{ docker_user }}"
  file:
    path: "{{ docker_user_info.home }}/bin"
    state: directory
    mode: "0700"

- name: create "{{ docker_user }}" systemd config dir
  become: 'yes'
  become_user: "{{ docker_user }}"
  file:
    path: "{{ docker_user_info.home }}/.config/systemd/user"
    state: directory
    mode: "0700"

- name: download docker-{{ docker_release }}.tgz
  become: 'yes'
  become_user: "{{ docker_user }}"
  get_url:
    url: "{{ docker_url }}/docker-{{ docker_release }}.tgz"
    dest: "{{ docker_user_info.home }}/docker-{{ docker_release }}.tgz"
    checksum: "sha256:{{ docker_release_shasum }}"

- name: download docker-rootless-extras-{{ docker_release }}.tgz
  become: 'yes'
  become_user: "{{ docker_user }}"
  get_url:
    url: "{{ docker_url }}/docker-rootless-extras-{{ docker_release }}.tgz"
    dest: "{{ docker_user_info.home }}/docker-rootless-extras-{{ docker_release }}.tgz"
    checksum: "sha256:{{ docker_release_rootless_shasum }}"

- name: extract docker-{{ docker_release }}.tgz into {{ docker_user_info.home }}/bin
  become: 'yes'
  become_user: "{{ docker_user }}"
  unarchive:
    src: "{{ docker_user_info.home }}/docker-{{ docker_release }}.tgz"
    dest: "{{ docker_user_info.home }}/bin"
    extra_opts:
      - --strip-components=1
    remote_src: 'yes'

- name: extract docker-rootless-extras-{{ docker_release }}.tgz into {{ docker_user_info.home }}/bin
  become: 'yes'
  become_user: "{{ docker_user }}"
  unarchive:
    src: "{{ docker_user_info.home }}/docker-rootless-extras-{{ docker_release }}.tgz"
    dest: "{{ docker_user_info.home }}/bin"
    extra_opts:
      - --strip-components=1
    remote_src: 'yes'

- name: add docker systemd service
  become: 'yes'
  become_user: "{{ docker_user }}"
  template:
    src: docker_rootless.service.j2
    dest: "{{ docker_user_info.home }}/.config/systemd/user/docker.service"
    backup: 'yes'
    mode: 0600

- name: enable and start docker (rootless installation)
  become: 'yes'
  become_user: "{{ docker_user }}"
  systemd:
    name: docker.service
    enabled: 'yes'
    state: started
    scope: user
    daemon_reload: 'yes'
...
